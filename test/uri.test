source [file dirname [info script]]/testing.tcl

package require meuri

# clean up a parse and put in a consistent order
proc cleanparse {parse} {
    array set x $parse
    set res {}
    foreach n $::uri::uri_parts {
        if {[info exists x($n)] && $x($n) ne ""} {
            lappend res $n $x($n)
        }
    }
    return $res
}

test uri-encode-1.1 {encode ascii uri} {
    uri encode fish
} {fish}

test uri-encode-1.2 {encode uri with space} {
    uri encode "flying fish"
} {flying%20fish}

test uri-encode-1.3 {encode uri with other chars} {
    uri encode "flying&fish/today"
} {flying%26fish%2ftoday}

test uri-encode-1.4 {encode uri but keep slashes} {
    uri encode -path "hello/cruel world"
} {hello/cruel%20world}

test uri-encode-1.4 {encode multiple parts} {
    uri encode "hello world" "bob" "fish & chips"
} {hello%20world bob fish%20%26%20chips}

test uri-is-asbsolute-1.1 {test if absolute url is absolute} {
    uri is absolute "https://example.com"
} {1}

test uri-is-asbsolute-1.2 {test if absolute url with path is absolute} {
    uri is absolute "https://example.com/hello"
} {1}

test uri-is-asbsolute-1.3 {test if absolute url with port is absolute} {
    uri is absolute "https://example.com:8443"
} {1}

test uri-is-asbsolute-1.4 {test if absolute url with user is absolute} {
    uri is absolute "https://user:pass@example.com:8443"
} {1}

test uri-is-asbsolute-1.5 {test if absolute url with all parts is absolute} {
    uri is absolute "https://user:pass@example.com:8443/path?q=s&v=help#frag"
} {1}

test uri-is-asbsolute-2.1 {test if root path is absolute} {
    uri is absolute "/"
} {0}

test uri-is-asbsolute-2.2 {test if empty is absolute} {
    uri is absolute ""
} {0}

test uri-is-asbsolute-2.4 {test if path is absolute} {
    uri is absolute "/hello/world"
} {0}

test uri-is-asbsolute-2.5 {test if relpath is absolute} {
    uri is absolute "../bob"
} {0}

test uri-is-asbsolute-2.5 {test if fragment is absolute} {
    uri is absolute "#frag"
} {0}

test uri-parse-1.1 {parse absolute pathless URI} {
    cleanparse [uri parse "https://example.com"]
} {scheme https host example.com}

test uri-parse-1.2 {parse absolute url with path} {
    cleanparse [uri parse "https://example.com/hello"]
} {scheme https host example.com path /hello}

test uri-parse-1.3 {parse absolute url with port} {
    cleanparse [uri parse "https://example.com:8443"]
} {scheme https host example.com port 8443}

test uri-parse-1.4 {parse absolute url with user} {
    cleanparse [uri parse "https://user:pass@example.com:8443"]
} {scheme https login user:pass host example.com port 8443}

test uri-parse-1.5 {parse absolute url with all parts} {
    cleanparse [uri parse "https://user:pass@example.com:8443/path?q=s&v=help#frag"]
} {scheme https login user:pass host example.com port 8443 path /path query ?q=s&v=help fragment #frag}

test uri-parse-2.1 {parse root path} {
    cleanparse [uri parse "/"]
} {path /}

test uri-parse-2.2 {parse empty} {
    cleanparse [uri parse ""]
} {}

test uri-parse-2.4 {parse path} {
    cleanparse [uri parse "/hello/world"]
} {path /hello/world}

test uri-parse-2.5 {parse relpath} {
    cleanparse [uri parse "../bob"]
} {path ../bob}

test uri-parse-2.5 {parse fragment} {
    cleanparse [uri parse "#frag"]
} {fragment #frag}

test uri-parse-3.1 {parse schemerel} {
    cleanparse [uri parse "://example.com/hello"]
} {host example.com path /hello}

test uri-unparse-1.1 {unparse empty} {
    uri unparse {}
} {}

test uri-unparse-1.2 {unparse bare path} {
    uri unparse {path /foo}
} {/foo}

test uri-unparse-1.3 {unparse rel path} {
    uri unparse {path ../foo}
} {../foo}

test uri-unparse-1.3 {unparse fragment} {
    uri unparse {fragment #bob}
} "#bob"

test uri-unparse-1.4 {unparse query} {
    uri unparse {query ?q=search}
} {?q=search}

test uri-unparse-1.5 {unparse host} {
    uri unparse {host example.com}
} {://example.com}

test uri-unparse-1.6 {unparse scheme} {
    uri unparse {host example.com scheme https}
} {https://example.com}

test uri-unparse-1.7 {unparse port} {
    uri unparse {host example.com scheme https port 8443}
} {https://example.com:8443}

test uri-unparse-2.1 {unparse basic absolute} {
    uri unparse {scheme https host example.com path /folder/file}
} {https://example.com/folder/file}

test uri-unparse-2.2 {unparse complex absolute} {
    uri unparse {scheme https host example.com path /search query ?q=help fragment #page2}
} {https://example.com/search?q=help#page2}

test uri-resolve-1.1 {resolve absolute url} {
    uri resolve https://example.com/hello https://example.org/fish
} {https://example.org/fish}

test uri-resolve-1.2 {resolve absolute path} {
    uri resolve https://example.com/fish /chips
} {https://example.com/chips}

test uri-resolve-1.3 {resolve schema-relative url} {
    uri resolve https://example.com/fish ://neverssl.com/search?q=fish
} {https://neverssl.com/search?q=fish}

test uri-resolve-2.1 {resolve fragment} {
    uri resolve https://example.com/fish #sides
} {https://example.com/fish#sides}

test uri-resolve-2.2 {resolve query} {
    uri resolve https://example.com/fish ?q=nope
} {https://example.com/fish?q=nope}

test uri-resolve-2.3 {resolve query with fragment} {
    uri resolve https://example.com/fish?q=yep#results ?q=nope
} {https://example.com/fish?q=nope#results}

test uri-resolve-3.1 {resolve relative path in folder} {
    uri resolve https://example.com/folder/ file.html
} {https://example.com/folder/file.html}

test uri-resolve-3.2 {resolve relative path to file} {
    uri resolve https://example.com/folder/document file.html
} {https://example.com/folder/file.html}

test uri-resolve-3.3 {resolve relative path to file with query} {
    uri resolve https://example.com/folder/document?q=search file.html
} {https://example.com/folder/file.html}

test uri-resolve-3.4 {resolve relative path to file drops fragment} {
    uri resolve https://example.com/folder/document#frag file.html
} {https://example.com/folder/file.html}

test uri-resolve-3.5 {resolve relative path to folder with parent spec} {
    uri resolve https://example.com/nested/folder/ ../file.html
} {https://example.com/nested/file.html}

test uri-resolve-3.6 {resolve relative path to folder with parent spec} {
    uri resolve https://example.com/nested/folder/other.html ../file.html
} {https://example.com/nested/file.html}

test uri-resolve-3.6 {resolve relative folder} {
    uri resolve https://example.com/nested/folder/other.html ../folder2/
} {https://example.com/nested/folder2/}

testreport